StationName = $TEMPLATE_STATION_NAME

Const SCAN_INTERVAL_S As Long = 5 ' Program scan Interval. 
Const SLOW_MEASUREMENT_INTERVAL_S As Long = 3600 ' Slower interval for less critical measurements, such as GPS
Const COMMS As Long = CELLULAR
Const CELL_WINDOW_START As Long = 1440
Const CELL_WINDOW_DURATION As Long = 10
Const CELL_WINDOW_FREQUENCY As Long = 1440  ' Modem is always on when CELL_WINDOW_START = 1440
Const GPS_PORT As Long = ComC2_Rx                             ' C2. Serial Rx from GPS
Const TIMER_STOP As Long = 1
Const TIMER_RESET_AND_START As Long = 2
Const TIMER_RESET_AND_STOP As Long = 3
Const TIMER_READ As Long = 4
Const ALLOW_SLEEP As Long = 1
Const GPS_TIMER As Long = 11
Const GPS_SATELLITES_REQUIRED As Long = 4
Const GPS_MAX_ON_TIME As Long = 180 ' If the GPS is on longer than this, the subroutine turns it off
Const GPS_BAUD As Long = 9600
Const GPS_BUFFER As Long = 512 ' The uBlox GPS outputs a lot more messages, allow a bigger string.  400
Const GPS_PARAMETERS As Long = 9 ' 1=Time(UTC),2=Date,3=Lat(ddmm),4=Lat(.mmmmmm),5=Long(ddmm),6=Long(.mmmmmm),7=Alt,8=Fix,9=#Sat

IncludeSection("IO", "CPU:lib.dld")

Dim GPSReadingsString(GPS_PARAMETERS) As String * 16
Dim GPSReadings(GPS_PARAMETERS) As Float
Alias GPSReadings(1) = GPS_UTCtime: Units GPS_UTCtime = HHMMSS
Alias GPSReadings(2) = GPS_Latitude_dddmm: Units GPS_Latitude_dddmm = dddmm.mmmm
Alias GPSReadings(3) = GPS_LatitudeHemisphere: Units GPS_LatitudeHemisphere = 1=N, -1=S
Alias GPSReadings(4) = GPS_Longitude_dddmm: Units GPS_Longitude_dddmm = dddmm.mmmm
Alias GPSReadings(5) = GPS_LongitudeHemisphere: Units GPS_LongitudeHemisphere = 1=E, -1=W
Alias GPSReadings(6) = GPS_QualityIndicator: Units GPS_QualityIndicator = 0=NoFix,1=GPS,2=DIFFERENTIAL
Alias GPSReadings(7) = GPS_Satellites: Units GPS_Satellites = count
Alias GPSReadings(8) = GPS_HDOP: Units GPS_HDOP = error estimate
Alias GPSReadings(9) = GPS_Height: Units GPS_Height = meters

Dim Longitude As Float
Function GetLongitude() As Float
  Longitude = Floor(GPS_Longitude_dddmm / 100.0) + (GPS_Longitude_dddmm MOD 100)/60
  If GPSReadingsString(5) = "W" Then
    GPS_Longitude_dddmm = -GPS_Longitude_dddmm
    Longitude = -Longitude
  End If
End Function

Dim Latitude As Float
Function GetLatitude() As Float
  Latitude = Floor(GPS_Latitude_dddmm / 100.0) + (GPS_Latitude_dddmm MOD 100)/60
  If GPSReadingsString(3) = "S" Then
    GPS_Latitude_dddmm = -GPS_Latitude_dddmm
    Latitude = -Latitude
  End If
End Function

Public GPSString As String * GPS_BUFFER: Units GPSString = NMEA 0183 Processed String
Sub ReadGPS
  Dim Comma1 As Long
  Dim Comma2 As Long
  Dim CommaCount As Long
  Dim InternalCounter As Long
  Dim RawGPSString As String * GPS_BUFFER
  Dim GPSStart As Long
  Dim GPSEnd As Long
  Dim GPSLength As Long
  If NOT(Vx2Voltage) Then
    Timer(GPS_TIMER, Sec, TIMER_RESET_AND_START)
  End If
  SetVx2mV(5000)
  If (Timer(GPS_TIMER, Sec, TIMER_READ) > GPS_MAX_ON_TIME) Then
    SetVx2mV(0)
    Timer(GPS_TIMER, Sec, TIMER_STOP)
  End If
  SerialIn(RawGPSString, GPS_PORT, 50, 0, GPS_BUFFER)
  SerialFlush(GPS_PORT)
  GPSStart = InStr(1, RawGPSString, "$GPGGA", 2)
  GPSEnd = InStr(GPSStart+1, RawGPSString, "M", 2) ' See http://aprs.gids.nl/nmea/#gga
  If (GPSStart>0) AND (GPSEnd>0) Then
    GPSString = Mid(RawGPSString, GPSStart, GPSEnd-GPSStart)
    GPSLength = Len(GPSString)
    Comma2 = 1
    CommaCount = 0
    ' convert to double precision data, starting at the start of the string
    For InternalCounter = 1 To GPS_PARAMETERS
      Comma1 = InStr(Comma2, GPSString, ",", 2)
      Comma2 = InStr(Comma1+1, GPSString, ",", 2) ' Start searching at the position of the last comma
      If Comma2 > 0 Then
        GPSReadingsString(InternalCounter) = Mid(GPSString,Comma1+1,Comma2-Comma1-1) ' If it isn't above zero, the string was truncated for some reason
        CommaCount+=1
      End If
    Next InternalCounter
    For InternalCounter = 1 To GPS_PARAMETERS
      GPSReadings(InternalCounter) = GPSReadingsString(InternalCounter) ' Convert from string to double
    Next InternalCounter
    If CommaCount >= 9 AND (GPSReadings(7) >= GPS_SATELLITES_REQUIRED) Then
      Latitude = GetLatitude()
      Longitude = GetLongitude()
      WritePort(Vx2,0)
      Timer(GPS_TIMER, Sec, TIMER_STOP)
    End If
  End If
EndSub

DataTable(Ai1,True,3000)
  DataInterval(0, 1, Hr, 0)
  Sample(1, Status.CellRSSI,FP2): FieldNames("CellRSSI:dBm"): Units CellRSSI = dBm
  Sample(1, Status.CellNetBand,FP2): FieldNames("CellNetBand:band")
  Sample(1, Latitude, IEEE4)
  Sample(1, Longitude, IEEE4)
  Sample(1, GPSSatellitesInView, FP2)
EndTable

BeginProg
  Call WritePort(Vx2,0)
  Timer(GPS_TIMER, Sec, TIMER_STOP)
  SerialOpen(GPS_PORT, GPS_BAUD, 0, 0, GPS_BUFFER, ALLOW_SLEEP)    ' Open GPS port
  
  SetSetting("PakBusTCPClients", "(drema.konectgds.com,9200)")
  SetSetting("PakBusAddress", $TEMPLATE_PAKBUS_ADDRESS)
  SetSetting("CellEnabled",True)
  SetSetting("CellAPN", "so01.VZWSTATIC")
  SetSetting("CellPwrStartTime", CELL_WINDOW_START)
  SetSetting("CellPwrDuration", CELL_WINDOW_DURATION)
  SetSetting("CellPwrRepeat", CELL_WINDOW_FREQUENCY)
  SetSetting("CellBillingDay", 1)
  SetSetting("CellKeepAlive", "www.google.com")
  SetSetting("CellKeepAliveTime", 30)

  Scan (SCAN_INTERVAL_S, Sec, 0, 0)
    If TimeIntoInterval(0, SLOW_MEASUREMENT_INTERVAL_S, Sec) Then
      Call ReadGPS
    EndIf
    CallTable Ai1
  NextScan
EndProg
