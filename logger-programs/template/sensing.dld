StationName = $TEMPLATE_STATION_NAME

Const SCAN_INTERVAL_S As Long = 5 ' Program scan Interval, seconds 
Const MEASUREMENT_INTERVAL_S As Long = 900 ' Sensor measurement interval, seconds
Const SENSOR_WARMUP_S As Long = 0
Const MEASURE_BEFORE_S As Long = 0 ' time to warm up before measuring (in s). 0 to have always on
Const CELL_WINDOW_START As Long = 1440 ' Modem is always on when 1440
Const CELL_WINDOW_DURATION As Long = 10
Const CELL_WINDOW_FREQUENCY As Long = 1440  
Const READ_ATTEMPTS_LIMIT As Long = 4

IncludeSection("Additional","CPU:lib.dld") ' constant definitions
IncludeSection("IO","CPU:lib.dld")
Include "CPU:YSIP_CONST_Enc.CR300"
Include "CPU:YSIP_CORE_Enc.CR300"

Dim ReadAttempts As Long ' Keep track of how many times the sensor read was attempted
Dim WQTemporaryRS485(YSISWATH) As Float
Dim HydrosphereDescription(PARAMETERS_TO_SEND) As String * 26 ' description of parameter, up to 24 characters in length 
Dim HydrosphereValues(PARAMETERS_TO_SEND) As Float ' Values to send
Dim SondeReadFailed As Boolean = False
Dim TimeInto As Long = (MEASUREMENT_INTERVAL_S - MEASURE_BEFORE_S) % MEASUREMENT_INTERVAL_S
Sub SensorMeasurements()
  If TimeIntoInterval(0, MEASUREMENT_INTERVAL_S, Sec) Then
    SetSW12V(True)
  End If
  If TimeIntoInterval(TimeInto, MEASUREMENT_INTERVAL_S, Sec) Then
    SetVx1mV(5000)
    Delay(0, 200, mSec) ' Allow sonde to wake up
    WQTemporaryRS485() = SondeValuesSorted() ' Save the previous values
    If NOT(sondefound) Then 
      findSonde(3)
    End If
    startWipe()
    getWipeStatus()
    Delay(0, 40, Sec)
    sondeCheck()
    getSondeParams() ' Handle any sonde changes and update parameters
    ReadAttempts = 0
    Do
      ReadAttempts += 1
      Sonde_External_Voltage = NaN
      External_Temp = NaN
      Depth = NaN ' Prepare parameters to check with NaN so that a successful read is identified
      getSondeValues() ' Populate available sonde parameters
      sortYSIPData()
      SondeReadFailed = False
      If (Sonde_External_Voltage = NaN) AND (WiperPosition = NAN) Then SondeReadFailed = True ' NAN's occur if there is no communications to sonde
      If (Sonde_External_Voltage = 0) AND (WiperPosition = 0) Then SondeReadFailed = True ' 0's can occur if the sonde has failed to measure sensors yet, but ready to talk
    Loop While (SondeReadFailed AND (ReadAttempts <= READ_ATTEMPTS_LIMIT))
    If SondeReadFailed Then  ' We didn't get a single valid reading, so map in the previous values
      SondeValuesSorted() = WQTemporaryRS485()
    Else
      getSondeSN()
      CallTable SondeValues
    End If
    CallTable YSISondeMeta
    SetVx1mV(0)
  End If
  SetSW12V(False)
  SetVx1mV(0)
EndSub

BeginProg
  SetSetting("PakBusTCPClients", "(drema.konectgds.com,9200)")
  SetSetting("PakBusAddress", $TEMPLATE_PAKBUS_ADDRESS)
  SetSetting("CellEnabled", True) ' Make sure that the modem is turned on
  SetSetting("CellAPN", "so01.VZWSTATIC") ' Possible to set this through the constant table
  SetSetting("CellPwrStartTime", CELL_WINDOW_START) ' When to power up the modem
  SetSetting("CellPwrDuration", CELL_WINDOW_DURATION) ' How long is each window
  SetSetting("CellPwrRepeat", CELL_WINDOW_FREQUENCY) ' When does the window repeat, i.e. hourly
  SetSetting("CellBillingDay", 1) ' When to roll over the monthly usage
  SetSetting("CellKeepAlive", "www.google.com")
  SetSetting("CellKeepAliveTime", 30) ' How often to ping test the link
  IPNetPower(5, 1, 0) ' Make sure that modem is turned on
	SetVx1mV(5000)
  SetSW12V(True)
  Delay(0, 25, Sec)
	YSIPInit()
  findSonde(3)
	SetVx1mV(0)
	If SENSOR_WARMUP_S > 0 Then
    SetSW12V(False)
  End If
  Scan (SCAN_INTERVAL_S, Sec, 0, 0)
    Call SensorMeasurements
  NextScan
EndProg
